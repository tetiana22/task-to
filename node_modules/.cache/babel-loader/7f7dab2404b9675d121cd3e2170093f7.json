{"ast":null,"code":"var _jsxFileName = \"/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/components/mainModal/MainModal.jsx\",\n  _s = $RefreshSig$();\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react'; // Import useRef hook\nimport { selectModalActiveModal } from '../../redux/modal/selectors';\nimport { closeModal } from '../../redux/modal/modalSlice';\nimport { ModalBackdrop, ModalContent } from './MainModal.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalComponent = _ref => {\n  _s();\n  let {\n    modalId,\n    children\n  } = _ref;\n  const dispatch = useDispatch();\n  const activeModal = useSelector(selectModalActiveModal);\n  const modalRootRef = useRef(document.getElementById('modal-root')); // Use useRef\n\n  const closeModalOnBackdrop = e => {\n    if (e.target === e.currentTarget) {\n      dispatch(closeModal());\n    }\n  };\n  useEffect(() => {\n    const closeModalonEsc = e => {\n      if (e.key === 'Escape') {\n        dispatch(closeModal());\n      }\n    };\n    if (activeModal === modalId) {\n      window.addEventListener('keydown', closeModalonEsc);\n    }\n    return () => {\n      window.removeEventListener('keydown', closeModalonEsc);\n    };\n  }, [dispatch, activeModal, modalId]);\n\n  // Check if modalRootRef exists before using it\n  const modalRoot = modalRootRef.current;\n  if (!modalRoot) return null;\n  return /*#__PURE__*/createPortal(activeModal === modalId ? /*#__PURE__*/_jsxDEV(ModalBackdrop, {\n    onClick: closeModalOnBackdrop,\n    children: /*#__PURE__*/_jsxDEV(ModalContent, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this) : null, modalRoot);\n};\n_s(ModalComponent, \"ws9MXpnT/fHov02eu2nnjKPjk2s=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ModalComponent;\nexport default ModalComponent;\nvar _c;\n$RefreshReg$(_c, \"ModalComponent\");","map":{"version":3,"names":["createPortal","useDispatch","useSelector","useEffect","useRef","selectModalActiveModal","closeModal","ModalBackdrop","ModalContent","jsxDEV","_jsxDEV","ModalComponent","_ref","_s","modalId","children","dispatch","activeModal","modalRootRef","document","getElementById","closeModalOnBackdrop","e","target","currentTarget","closeModalonEsc","key","window","addEventListener","removeEventListener","modalRoot","current","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/components/mainModal/MainModal.jsx"],"sourcesContent":["import { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react'; // Import useRef hook\nimport { selectModalActiveModal } from '../../redux/modal/selectors';\nimport { closeModal } from '../../redux/modal/modalSlice';\nimport { ModalBackdrop, ModalContent } from './MainModal.styled';\n\nconst ModalComponent = ({ modalId, children }) => {\n  const dispatch = useDispatch();\n  const activeModal = useSelector(selectModalActiveModal);\n  const modalRootRef = useRef(document.getElementById('modal-root')); // Use useRef\n\n  const closeModalOnBackdrop = e => {\n    if (e.target === e.currentTarget) {\n      dispatch(closeModal());\n    }\n  };\n\n  useEffect(() => {\n    const closeModalonEsc = e => {\n      if (e.key === 'Escape') {\n        dispatch(closeModal());\n      }\n    };\n\n    if (activeModal === modalId) {\n      window.addEventListener('keydown', closeModalonEsc);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', closeModalonEsc);\n    };\n  }, [dispatch, activeModal, modalId]);\n\n  // Check if modalRootRef exists before using it\n  const modalRoot = modalRootRef.current;\n  if (!modalRoot) return null;\n\n  return createPortal(\n    activeModal === modalId ? (\n      <ModalBackdrop onClick={closeModalOnBackdrop}>\n        <ModalContent>{children}</ModalContent>\n      </ModalBackdrop>\n    ) : null,\n    modalRoot\n  );\n};\n\nexport default ModalComponent;\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,WAAW;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO,CAAC,CAAC;AAC3C,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,aAAa,EAAEC,YAAY,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,cAAc,GAAGC,IAAA,IAA2B;EAAAC,EAAA;EAAA,IAA1B;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAAH,IAAA;EAC3C,MAAMI,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,WAAW,GAAGf,WAAW,CAACG,sBAAsB,CAAC;EACvD,MAAMa,YAAY,GAAGd,MAAM,CAACe,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpE,MAAMC,oBAAoB,GAAGC,CAAC,IAAI;IAChC,IAAIA,CAAC,CAACC,MAAM,KAAKD,CAAC,CAACE,aAAa,EAAE;MAChCR,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;EAEDH,SAAS,CAAC,MAAM;IACd,MAAMsB,eAAe,GAAGH,CAAC,IAAI;MAC3B,IAAIA,CAAC,CAACI,GAAG,KAAK,QAAQ,EAAE;QACtBV,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC;MACxB;IACF,CAAC;IAED,IAAIW,WAAW,KAAKH,OAAO,EAAE;MAC3Ba,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEH,eAAe,CAAC;IACrD;IAEA,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEJ,eAAe,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,EAAEC,WAAW,EAAEH,OAAO,CAAC,CAAC;;EAEpC;EACA,MAAMgB,SAAS,GAAGZ,YAAY,CAACa,OAAO;EACtC,IAAI,CAACD,SAAS,EAAE,OAAO,IAAI;EAE3B,oBAAO9B,YAAY,CACjBiB,WAAW,KAAKH,OAAO,gBACrBJ,OAAA,CAACH,aAAa;IAACyB,OAAO,EAAEX,oBAAqB;IAAAN,QAAA,eAC3CL,OAAA,CAACF,YAAY;MAAAO,QAAA,EAAEA;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC,GACd,IAAI,EACRN,SACF,CAAC;AACH,CAAC;AAACjB,EAAA,CAvCIF,cAAc;EAAA,QACDV,WAAW,EACRC,WAAW;AAAA;AAAAmC,EAAA,GAF3B1B,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}