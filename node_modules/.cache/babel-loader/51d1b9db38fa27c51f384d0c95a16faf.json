{"ast":null,"code":"var _jsxFileName = \"/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/pages/Home/ScreensPage/ScreensPage.jsx\",\n  _s = $RefreshSig$();\nimport { selectCurrentBg, selectCurrentName } from '../../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport HeaderDashboard from 'components/Boards/HeaderDashboard/HeaderDashboard';\nimport MainDashboard from 'components/Boards/MainDashboard/MainDashboard';\nimport { selectIsMenuOpen } from '../../../redux/menu/selectors';\nimport { closeMenuMode } from '../../../redux/menu/menuSlice';\nimport { Wrapper } from './ScreensPage.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreensPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const menuMode = useSelector(selectIsMenuOpen);\n  const currentBg = useSelector(state => {\n    var _state$dashboards;\n    return state === null || state === void 0 ? void 0 : (_state$dashboards = state.dashboards) === null || _state$dashboards === void 0 ? void 0 : _state$dashboards.currentBg;\n  });\n  const currentName = useSelector(state => {\n    var _state$dashboards2;\n    return state === null || state === void 0 ? void 0 : (_state$dashboards2 = state.dashboards) === null || _state$dashboards2 === void 0 ? void 0 : _state$dashboards2.currentName;\n  });\n  const handleScreenClick = () => {\n    if (menuMode) {\n      dispatch(closeMenuMode());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    onClick: handleScreenClick,\n    bgcUrl: currentBg,\n    isOpen: menuMode,\n    children: /*#__PURE__*/_jsxDEV(HeaderDashboard, {\n      children: currentName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreensPage, \"BK7+zglZBKmrg12DO7KZOvSP4xM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = ScreensPage;\nexport default ScreensPage;\nvar _c;\n$RefreshReg$(_c, \"ScreensPage\");","map":{"version":3,"names":["selectCurrentBg","selectCurrentName","useSelector","useDispatch","HeaderDashboard","MainDashboard","selectIsMenuOpen","closeMenuMode","Wrapper","jsxDEV","_jsxDEV","ScreensPage","_s","dispatch","menuMode","currentBg","state","_state$dashboards","dashboards","currentName","_state$dashboards2","handleScreenClick","onClick","bgcUrl","isOpen","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/pages/Home/ScreensPage/ScreensPage.jsx"],"sourcesContent":["import { selectCurrentBg, selectCurrentName } from '../../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport HeaderDashboard from 'components/Boards/HeaderDashboard/HeaderDashboard';\nimport MainDashboard from 'components/Boards/MainDashboard/MainDashboard';\nimport { selectIsMenuOpen } from '../../../redux/menu/selectors';\nimport { closeMenuMode } from '../../../redux/menu/menuSlice';\nimport { Wrapper } from './ScreensPage.styled';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const menuMode = useSelector(selectIsMenuOpen);\n  const currentBg = useSelector(state => state?.dashboards?.currentBg);\n  const currentName = useSelector(state => state?.dashboards?.currentName);\n\n  const handleScreenClick = () => {\n    if (menuMode) {\n      dispatch(closeMenuMode());\n    }\n  };\n\n  return (\n    <Wrapper onClick={handleScreenClick} bgcUrl={currentBg} isOpen={menuMode}>\n      <HeaderDashboard children={currentName} />\n\n      {/* <MainDashboard /> */}\n    </Wrapper>\n  );\n};\n\nexport default ScreensPage;\n"],"mappings":";;AAAA,SAASA,eAAe,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC7E,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,eAAe,MAAM,mDAAmD;AAC/E,OAAOC,aAAa,MAAM,+CAA+C;AACzE,SAASC,gBAAgB,QAAQ,+BAA+B;AAChE,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,OAAO,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,QAAQ,GAAGZ,WAAW,CAACI,gBAAgB,CAAC;EAC9C,MAAMS,SAAS,GAAGb,WAAW,CAACc,KAAK;IAAA,IAAAC,iBAAA;IAAA,OAAID,KAAK,aAALA,KAAK,wBAAAC,iBAAA,GAALD,KAAK,CAAEE,UAAU,cAAAD,iBAAA,uBAAjBA,iBAAA,CAAmBF,SAAS;EAAA,EAAC;EACpE,MAAMI,WAAW,GAAGjB,WAAW,CAACc,KAAK;IAAA,IAAAI,kBAAA;IAAA,OAAIJ,KAAK,aAALA,KAAK,wBAAAI,kBAAA,GAALJ,KAAK,CAAEE,UAAU,cAAAE,kBAAA,uBAAjBA,kBAAA,CAAmBD,WAAW;EAAA,EAAC;EAExE,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIP,QAAQ,EAAE;MACZD,QAAQ,CAACN,aAAa,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;EAED,oBACEG,OAAA,CAACF,OAAO;IAACc,OAAO,EAAED,iBAAkB;IAACE,MAAM,EAAER,SAAU;IAACS,MAAM,EAAEV,QAAS;IAAAW,QAAA,eACvEf,OAAA,CAACN,eAAe;MAACqB,QAAQ,EAAEN;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGnC,CAAC;AAEd,CAAC;AAACjB,EAAA,CAnBID,WAAW;EAAA,QACER,WAAW,EACXD,WAAW,EACVA,WAAW,EACTA,WAAW;AAAA;AAAA4B,EAAA,GAJ3BnB,WAAW;AAqBjB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}