{"ast":null,"code":"import { get as r, set as e } from \"react-hook-form\";\nvar t = function (e, t, i) {\n    if (e && \"reportValidity\" in e) {\n      var n = r(i, t);\n      e.setCustomValidity(n && n.message || \"\"), e.reportValidity();\n    }\n  },\n  i = function (r, e) {\n    var i = function (i) {\n      var n = e.fields[i];\n      n && n.ref && \"reportValidity\" in n.ref ? t(n.ref, i, r) : n.refs && n.refs.forEach(function (e) {\n        return t(e, i, r);\n      });\n    };\n    for (var n in e.fields) i(n);\n  },\n  n = function (t, n) {\n    n.shouldUseNativeValidation && i(t, n);\n    var f = {};\n    for (var a in t) {\n      var s = r(n.fields, a),\n        u = Object.assign(t[a] || {}, {\n          ref: s && s.ref\n        });\n      if (o(n.names || Object.keys(t), a)) {\n        var c = Object.assign({}, r(f, a));\n        e(c, \"root\", u), e(f, a, c);\n      } else e(f, a, u);\n    }\n    return f;\n  },\n  o = function (r, e) {\n    return r.some(function (r) {\n      return r.startsWith(e + \".\");\n    });\n  };\nexport { n as toNestErrors, i as validateFieldsNatively };","map":{"version":3,"mappings":";AASA,IAAMA,IAAoB,UACxBC,GACAC,GACAC;IAEA,IAAIF,KAAO,oBAAoBA,GAAK;MAClC,IAAMG,IAAQC,EAAIF,GAAQD;MAC1BD,EAAID,kBAAmBI,KAASA,EAAME,WAAY,KAElDL,EAAIM,gBACL;IAAA;EACH;EAGaC,IAAyB,UACpCL,GACAM;IACQ;MAEN,IAAMC,IAAQD,EAAQE,OAAOT;MACzBQ,KAASA,EAAMT,OAAO,oBAAoBS,EAAMT,MAClDD,EAAkBU,EAAMT,KAAKC,GAAWC,KAC/BO,EAAME,QACfF,EAAME,KAAKC,QAAQ,UAACZ;QAAqB,OACvCD,EAAkBC,GAAKC,GAAWC,EAAO;MAAA,EAG9C;IAAA;IATD,KAAK,IAAMD,KAAaO,EAAQE,QAAMG,IAUxC;EAAA;EC1BaC,IAAe,UAC1BZ,GACAM;IAEAA,EAAQO,6BAA6BR,EAAuBL,GAAQM;IAEpE,IAAMQ,IAAc;IACpB,KAAK,IAAMC,KAAQf,GAAQ;MACzB,IAAMO,IAAQL,EAAII,EAAQE,QAAQO;QAC5Bd,IAAQe,OAAOC,OAAOjB,EAAOe,MAAS,CAAE,GAAE;UAC9CjB,KAAKS,KAASA,EAAMT;QAAAA;MAGtB,IAAIoB,EAAmBZ,EAAQa,SAASH,OAAOI,KAAKpB,IAASe,IAAO;QAClE,IAAMM,IAAmBL,OAAOC,OAAO,IAAIf,EAAIY,GAAaC;QAE5DO,EAAID,GAAkB,QAAQpB,IAC9BqB,EAAIR,GAAaC,GAAMM,EACxB;MAAA,OACCC,EAAIR,GAAaC,GAAMd,EAE1B;IAAA;IAED,OAAOa,CACT;EAAA;EAEMI,IAAqB,UACzBC,GACAI;IAAuB,OACpBJ,EAAMK,KAAK,UAACC;MAAM,SAAEC,WAAWH,IAAO,IAAI;IAAA,EAAC;EAAA;AAAA","names":["setCustomValidity","ref","fieldPath","errors","error","get","message","reportValidity","validateFieldsNatively","options","field","fields","refs","forEach","_loop","toNestErrors","shouldUseNativeValidation","fieldErrors","path","Object","assign","isNameInFieldArray","names","keys","fieldArrayErrors","set","name","some","n","startsWith"],"sources":["/Users/tetanaglincak/Desktop/taskpro-finish/task-to/node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","/Users/tetanaglincak/Desktop/taskpro-finish/task-to/node_modules/@hookform/resolvers/src/toNestErrors.ts"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n"]},"metadata":{},"sourceType":"module"}