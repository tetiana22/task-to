{"ast":null,"code":"var _jsxFileName = \"/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/pages/Home/ScreensPage/ScreensPage.jsx\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { selectBoards } from '../../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getDashboardById } from '../../../redux/cards/cardsReducers';\nimport HeaderDashboard from 'components/Boards/HeaderDashboard/HeaderDashboard';\nimport MainDashboard from 'components/Boards/MainDashboard/MainDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreensPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const currentBg = useSelector(state => {\n    var _state$dashboards;\n    return state === null || state === void 0 ? void 0 : (_state$dashboards = state.dashboards) === null || _state$dashboards === void 0 ? void 0 : _state$dashboards.currentBg;\n  });\n  const currentName = useSelector(state => {\n    var _state$dashboards2;\n    return state === null || state === void 0 ? void 0 : (_state$dashboards2 = state.dashboards) === null || _state$dashboards2 === void 0 ? void 0 : _state$dashboards2.currentName;\n  });\n  const handleScreenClick = () => {\n    if (menuMode) {\n      dispatch(closeMenuMode());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    onClick: handleScreenClick,\n    bgcUrl: currentBg,\n    isOpen: menuMode,\n    children: [/*#__PURE__*/_jsxDEV(HeaderDashboard, {\n      children: currentName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainDashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreensPage, \"ciDrBHc2RIogmO74mUYUeuRfLL4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ScreensPage;\nexport default ScreensPage;\nvar _c;\n$RefreshReg$(_c, \"ScreensPage\");","map":{"version":3,"names":["useParams","selectBoards","useSelector","useEffect","useDispatch","getDashboardById","HeaderDashboard","MainDashboard","jsxDEV","_jsxDEV","ScreensPage","_s","dispatch","currentBg","state","_state$dashboards","dashboards","currentName","_state$dashboards2","handleScreenClick","menuMode","closeMenuMode","Wrapper","onClick","bgcUrl","isOpen","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tetanaglincak/Desktop/TaskPro project/Final-project-frontend/src/pages/Home/ScreensPage/ScreensPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { selectBoards } from '../../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getDashboardById } from '../../../redux/cards/cardsReducers';\nimport HeaderDashboard from 'components/Boards/HeaderDashboard/HeaderDashboard';\nimport MainDashboard from 'components/Boards/MainDashboard/MainDashboard';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n\n  const currentBg = useSelector(state => state?.dashboards?.currentBg);\n  const currentName = useSelector(state => state?.dashboards?.currentName);\n\n  const handleScreenClick = () => {\n    if (menuMode) {\n      dispatch(closeMenuMode());\n    }\n  };\n\n  return (\n    <Wrapper onClick={handleScreenClick} bgcUrl={currentBg} isOpen={menuMode}>\n      <HeaderDashboard children={currentName} />\n\n      <MainDashboard />\n    </Wrapper>\n  );\n};\n\nexport default ScreensPage;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,OAAOC,eAAe,MAAM,mDAAmD;AAC/E,OAAOC,aAAa,MAAM,+CAA+C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,SAAS,GAAGX,WAAW,CAACY,KAAK;IAAA,IAAAC,iBAAA;IAAA,OAAID,KAAK,aAALA,KAAK,wBAAAC,iBAAA,GAALD,KAAK,CAAEE,UAAU,cAAAD,iBAAA,uBAAjBA,iBAAA,CAAmBF,SAAS;EAAA,EAAC;EACpE,MAAMI,WAAW,GAAGf,WAAW,CAACY,KAAK;IAAA,IAAAI,kBAAA;IAAA,OAAIJ,KAAK,aAALA,KAAK,wBAAAI,kBAAA,GAALJ,KAAK,CAAEE,UAAU,cAAAE,kBAAA,uBAAjBA,kBAAA,CAAmBD,WAAW;EAAA,EAAC;EAExE,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIC,QAAQ,EAAE;MACZR,QAAQ,CAACS,aAAa,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;EAED,oBACEZ,OAAA,CAACa,OAAO;IAACC,OAAO,EAAEJ,iBAAkB;IAACK,MAAM,EAAEX,SAAU;IAACY,MAAM,EAAEL,QAAS;IAAAM,QAAA,gBACvEjB,OAAA,CAACH,eAAe;MAACoB,QAAQ,EAAET;IAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1CrB,OAAA,CAACF,aAAa;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAACnB,EAAA,CAnBID,WAAW;EAAA,QACEN,WAAW,EAEVF,WAAW,EACTA,WAAW;AAAA;AAAA6B,EAAA,GAJ3BrB,WAAW;AAqBjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}